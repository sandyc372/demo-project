{"version":3,"sources":["components/ApplicationList/ApplicationList.tsx","apis/applicationDataApi.tsx","components/ApplicationData/ApplicationData.tsx","pages/MainPage/MainPage.tsx","apis/applicationsApi.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApplicationList","selectedApplicationName","this","props","selectedApplication","applicationName","className","style","maxHeight","window","innerHeight","overflowY","applications","map","application","index","key","onClick","handeApplicationSelect","Component","data","Form","React","forwardRef","ref","onSubmit","event","preventDefault","type","placeholder","Result","textAlign","id","Error","role","ApplicationData","state","clientId","result","isLoadingResult","createRef","setState","current","value","Promise","resolve","reject","setTimeout","then","error","catch","e","handleFormSubmit","MainPage","applicationData","isLoadingApplications","i","push","otherData","slice","arg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.846549f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ApplicationList extends Component<any, any>{\r\n  render() {\r\n    let selectedApplicationName = this.props.selectedApplication ? this.props.selectedApplication.applicationName : null;\r\n    return (\r\n      <div className=\"list-group-flush\" style={{ maxHeight: window.innerHeight, overflowY: 'scroll'}}>\r\n        {\r\n          this.props.applications.map((application: any, index: number) => (\r\n          <button\r\n            className={`list-group-item list-group-item list-group-item-action text-left ${selectedApplicationName === application.applicationName ? 'active' : ''}`}\r\n            key={index}\r\n            onClick={() => { this.props.handeApplicationSelect(application)}}\r\n          >\r\n            { application.applicationName }\r\n          </button>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","let data = {\r\n  \"web-app\": {\r\n    \"servlet\": [\r\n      {\r\n        \"servlet-name\": \"cofaxCDS\",\r\n        \"servlet-class\": \"org.cofax.cds.CDSServlet\",\r\n        \"init-param\": {\r\n          \"configGlossary:installationAt\": \"Philadelphia, PA\",\r\n          \"configGlossary:adminEmail\": \"ksm@pobox.com\",\r\n          \"configGlossary:poweredBy\": \"Cofax\",\r\n          \"configGlossary:poweredByIcon\": \"/images/cofax.gif\",\r\n          \"configGlossary:staticPath\": \"/content/static\",\r\n          \"templateProcessorClass\": \"org.cofax.WysiwygTemplate\",\r\n          \"templateLoaderClass\": \"org.cofax.FilesTemplateLoader\",\r\n          \"templatePath\": \"templates\",\r\n          \"templateOverridePath\": \"\",\r\n          \"defaultListTemplate\": \"listTemplate.htm\",\r\n          \"defaultFileTemplate\": \"articleTemplate.htm\",\r\n          \"useJSP\": false,\r\n          \"jspListTemplate\": \"listTemplate.jsp\",\r\n          \"jspFileTemplate\": \"articleTemplate.jsp\",\r\n          \"cachePackageTagsTrack\": 200,\r\n          \"cachePackageTagsStore\": 200,\r\n          \"cachePackageTagsRefresh\": 60,\r\n          \"cacheTemplatesTrack\": 100,\r\n          \"cacheTemplatesStore\": 50,\r\n          \"cacheTemplatesRefresh\": 15,\r\n          \"cachePagesTrack\": 200,\r\n          \"cachePagesStore\": 100,\r\n          \"cachePagesRefresh\": 10,\r\n          \"cachePagesDirtyRead\": 10,\r\n          \"searchEngineListTemplate\": \"forSearchEnginesList.htm\",\r\n          \"searchEngineFileTemplate\": \"forSearchEngines.htm\",\r\n          \"searchEngineRobotsDb\": \"WEB-INF/robots.db\",\r\n          \"useDataStore\": true,\r\n          \"dataStoreClass\": \"org.cofax.SqlDataStore\",\r\n          \"redirectionClass\": \"org.cofax.SqlRedirection\",\r\n          \"dataStoreName\": \"cofax\",\r\n          \"dataStoreDriver\": \"com.microsoft.jdbc.sqlserver.SQLServerDriver\",\r\n          \"dataStoreUrl\": \"jdbc:microsoft:sqlserver://LOCALHOST:1433;DatabaseName=goon\",\r\n          \"dataStoreUser\": \"sa\",\r\n          \"dataStorePassword\": \"dataStoreTestQuery\",\r\n          \"dataStoreTestQuery\": \"SET NOCOUNT ON;select test='test';\",\r\n          \"dataStoreLogFile\": \"/usr/local/tomcat/logs/datastore.log\",\r\n          \"dataStoreInitConns\": 10,\r\n          \"dataStoreMaxConns\": 100,\r\n          \"dataStoreConnUsageLimit\": 100,\r\n          \"dataStoreLogLevel\": \"debug\",\r\n          \"maxUrlLength\": 500\r\n        }\r\n      },\r\n      {\r\n        \"servlet-name\": \"cofaxEmail\",\r\n        \"servlet-class\": \"org.cofax.cds.EmailServlet\",\r\n        \"init-param\": {\r\n          \"mailHost\": \"mail1\",\r\n          \"mailHostOverride\": \"mail2\"\r\n        }\r\n      },\r\n      {\r\n        \"servlet-name\": \"cofaxAdmin\",\r\n        \"servlet-class\": \"org.cofax.cds.AdminServlet\"\r\n      },\r\n\r\n      {\r\n        \"servlet-name\": \"fileServlet\",\r\n        \"servlet-class\": \"org.cofax.cds.FileServlet\"\r\n      },\r\n      {\r\n        \"servlet-name\": \"cofaxTools\",\r\n        \"servlet-class\": \"org.cofax.cms.CofaxToolsServlet\",\r\n        \"init-param\": {\r\n          \"templatePath\": \"toolstemplates/\",\r\n          \"log\": 1,\r\n          \"logLocation\": \"/usr/local/tomcat/logs/CofaxTools.log\",\r\n          \"logMaxSize\": \"\",\r\n          \"dataLog\": 1,\r\n          \"dataLogLocation\": \"/usr/local/tomcat/logs/dataLog.log\",\r\n          \"dataLogMaxSize\": \"\",\r\n          \"removePageCache\": \"/content/admin/remove?cache=pages&id=\",\r\n          \"removeTemplateCache\": \"/content/admin/remove?cache=templates&id=\",\r\n          \"fileTransferFolder\": \"/usr/local/tomcat/webapps/content/fileTransferFolder\",\r\n          \"lookInContext\": 1,\r\n          \"adminGroupID\": 4,\r\n          \"betaServer\": true\r\n        }\r\n      }],\r\n    \"servlet-mapping\": {\r\n      \"cofaxCDS\": \"/\",\r\n      \"cofaxEmail\": \"/cofaxutil/aemail/*\",\r\n      \"cofaxAdmin\": \"/admin/*\",\r\n      \"fileServlet\": \"/static/*\",\r\n      \"cofaxTools\": \"/tools/*\"\r\n    },\r\n\r\n    \"taglib\": {\r\n      \"taglib-uri\": \"cofax.tld\",\r\n      \"taglib-location\": \"/WEB-INF/tlds/cofax.tld\"\r\n    }\r\n  }\r\n}\r\n\r\nexport function getApplicationData(clientId: any, applicationName: any) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(data);\r\n    }, 2000)\r\n  });\r\n}","import React, { Component } from 'react';\r\nimport { getApplicationData } from '../../apis/applicationDataApi';\r\nimport JSONPretty from 'react-json-pretty';\r\nimport 'react-json-pretty/themes/monikai.css';\r\n\r\nconst Form = React.forwardRef((props: any, ref: any) => {\r\n  return (\r\n    <form onSubmit={(event) => {\r\n      props.onSubmit();\r\n      event.preventDefault();\r\n    }}>\r\n      <div className=\"input-group input-group-lg mb-3\">\r\n        <input type=\"text\" ref={ref} className=\"form-control\" placeholder=\"Enter client Id\" />\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-outline-secondary\" type=\"submit\">Search</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n})\r\n\r\nfunction Result(props: any) {\r\n  return (\r\n    <div style={{ textAlign: 'left', overflowY: 'scroll', maxHeight: window.innerHeight }}>\r\n      <JSONPretty id=\"json-pretty\" data={props.data}></JSONPretty>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Error(props: any) {\r\n  return (\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n      An error occurred\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default class ApplicationData extends Component<any, any>{\r\n  public ref: any;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      clientId: null,\r\n      result: null,\r\n      isLoadingResult: false\r\n    }\r\n    this.ref = React.createRef();\r\n  }\r\n\r\n  handleFormSubmit() {\r\n    this.setState({\r\n      isLoadingResult: true\r\n    })\r\n    getApplicationData(this.ref.current.value, this.props.selectedApplication.applicationName)\r\n      .then((data: any) => {\r\n        this.setState({\r\n          result: data,\r\n          isLoadingResult: false,\r\n          error: null\r\n        })\r\n      })\r\n      .catch((e) => {\r\n        this.setState({\r\n          result: null,\r\n          isLoadingResult: false,\r\n          error: e\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {\r\n          this.state.result ?\r\n            (<Result data={this.state.result} />)\r\n            : (\r\n              this.state.isLoadingResult ?\r\n                (<div className=\"alert alert-primary\" role=\"alert\">\r\n                  Fetching data...\r\n                </div>)\r\n                : (\r\n                  <Form\r\n                    ref={this.ref}\r\n                    onSubmit={() => { this.handleFormSubmit() }}\r\n                  />\r\n                )\r\n            )\r\n        }\r\n        {\r\n          this.state.error ? (<Error />) : null\r\n        }\r\n      </>\r\n    )\r\n\r\n\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { getApplications } from '../../apis/applicationsApi';\r\nimport ApplicationList from '../../components/ApplicationList/ApplicationList';\r\nimport ApplicationData from '../../components/ApplicationData/ApplicationData';\r\n\r\nexport default class MainPage extends Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      applications: [],\r\n      applicationData: null,\r\n      isLoadingApplications: true,\r\n      selectedApplication: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    getApplications()\r\n      .then((data: any) => {\r\n        data = data.slice();\r\n        this.setState({\r\n          isLoadingApplications: false,\r\n          applications: data\r\n        })\r\n      })\r\n      .catch(() => { })\r\n  }\r\n\r\n  handeApplicationSelect(application: any) {\r\n    this.setState({\r\n      selectedApplication: { ...application }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          {\r\n            this.state.isLoadingApplications ? (\r\n              <div className=\"col-md-12\">\r\n                <div className=\"alert alert-primary\" role=\"alert\">\r\n                  Fetching applications...\r\n                </div>\r\n              </div>)\r\n              : (\r\n                <>\r\n                  <div className=\"col-md-6\">\r\n                    <div className=\"card\">\r\n                      <div className=\"card-header\"> Applications </div>\r\n                      <div className=\"card-body\">\r\n                        <ApplicationList\r\n                          applications={this.state.applications}\r\n                          selectedApplication={this.state.selectedApplication}\r\n                          handeApplicationSelect={(arg: any) => { this.handeApplicationSelect(arg) }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    {\r\n                      this.state.selectedApplication ?\r\n                        (\r\n                          <div className=\"card\">\r\n                            <div className=\"card-header\">{this.state.selectedApplication.applicationName}</div>\r\n                            <div className=\"card-body\">\r\n                              <ApplicationData\r\n                                selectedApplication={this.state.selectedApplication}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        )\r\n                        : null\r\n                    }\r\n                  </div>\r\n                </>\r\n              )\r\n          }\r\n        </div>\r\n      </div >\r\n    )\r\n  }\r\n}","export function getApplications() {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      let data = [];\r\n      for (let i = 0; i < 20; i++) {\r\n        data.push({\r\n          applicationName: `Application ${i+1}`,\r\n          otherData: \"Other-data\"\r\n        })\r\n      }\r\n      resolve(data);\r\n    }, 1000)\r\n  });\r\n}","import React from 'react';\nimport './App.css';\nimport MainPage from './pages/MainPage/MainPage'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (/* process.env.NODE_ENV === 'production' &&  */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/assets/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log(registration, swUrl)\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      console.log(response.status, response.headers.get('content-type'))\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}